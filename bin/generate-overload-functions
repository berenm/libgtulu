#!/usr/bin/env python

import parser
import logging
logging.basicConfig(level=logging.DEBUG)

from gentulu.library import GLES2, GLES3, GL4, GL3, EGL, GLX, GTULU33, GTULU43
from gentulu.overload_serializer import LibrarySerializer

def main():
  from optparse import OptionParser, OptionGroup
  global opts

  opt = OptionParser("usage: %prog [-u] [-I INCLUDE_PATH]... [-D DEFINE[=VALUE]]... [-o OUTPUT] -i FILE")
  opt.add_option("-u", "--uncrustify", dest="uncrustify", action='store_true', default=False,
                 help="Run uncrustify ~/.uncrustifyrc on the generated file to format the source.")
  opt.add_option("-I", dest="include_paths", action='append', default=[],
                 help="Include paths to add to parse FILE.")
  opt.add_option("-D", dest="defines", action='append', default=[],
                 help="Preprocessor definitions to add to parse FILE.")
  opt.add_option("-l", "--library", dest="library",
                 help="Library to generate.")
  (opts, args) = opt.parse_args()

  if opts.library == 'gles2':
    library = GLES2
  elif opts.library == 'gles3':
    library = GLES3
  elif opts.library == 'gl3':
    library = GL3
  elif opts.library == 'gl4':
    library = GL4
  elif opts.library == 'egl':
    library = EGL
  elif opts.library == 'glx':
    library = GLX
  elif opts.library == 'gtulu3.3':
    library = GTULU33
  elif opts.library == 'gtulu4.3':
    library = GTULU43

  command_line = 'generate-functions -u -l %s' % opts.library

  target = 'include/gtulu/internal/generated/%s_functions' % library.name
  # target_header_fwd = target + '_fwd.hpp'
  target_header = target + '.hpp'
  target_source = target.replace('include/', 'src/lib/') + '.cpp'

  opts.defines.extend(library.defines)
  opts.include_paths.extend(library.include_paths)
  for filename in library.files:
    index = parser.FileFilteringIndexer(filename, opts.include_paths, opts.defines)
    functions = [ n for n in index.nodes() if isinstance(n, parser.types.Function)]
    for n in functions:
      d = library.declaration(n)
    # print r.typename + ' ' + f.new_name + '(' + ', '.join([ Parameter(c).std_str() for c in n.children if isinstance(c, parser.types.Parameter)]) + ')'
    # print d.str_define(True)
    # for c in n.children:
    # print c.name

  with open(target_header, 'w') as output:
    print >>output, LibrarySerializer(library).declarations(command_line)

  # with open(target_header, 'w') as output:
  #   print >>output, LibrarySerializer(library).definitions(command_line)

  with open(target_source, 'w') as output:
    print >>output, LibrarySerializer(library).definitions(command_line)

  if opts.uncrustify:
    # parser.uncrustify_file(target_header_fwd)
    parser.uncrustify_file(target_header)
    parser.uncrustify_file(target_source)

if __name__ == '__main__':
  main()
